/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => NavigateCursorHistory
});
var import_obsidian = __toModule(require("obsidian"));
function logHistory(backward, cur, forward) {
}
var NavigateCursorHistory = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.backward = [];
    this.forward = [];
  }
  onload() {
    return __async(this, null, function* () {
      this.registerEvent(this.app.workspace.on("file-open", (file) => {
        if (!this.cur) {
          this.cur = { file, line: 0, ch: 0 };
        }
        if (this.cur.file !== file) {
          this.saveHistory(file, { line: 0, ch: 0 });
        }
      }));
      this.addCommand({
        id: "cursor-position-backward",
        name: "Go back",
        editorCallback: (editor, view) => __async(this, null, function* () {
          if (this.backward.length < 1)
            return;
          const cur = this.cur;
          const prev = this.backward.pop();
          this.forward.push(cur);
          if (cur.file !== prev.file) {
            yield this.app.workspace.getMostRecentLeaf().openFile(prev.file);
          }
          this.cur = prev;
          const pos = { line: prev.line, ch: prev.ch };
          editor.setSelection(pos);
          editor.scrollIntoView({ from: pos, to: pos }, true);
          logHistory(this.backward, this.cur, this.forward);
        })
      });
      this.addCommand({
        id: "cursor-position-forward",
        name: "Go forward",
        editorCallback: (editor, view) => __async(this, null, function* () {
          if (this.forward.length < 1)
            return;
          const cur = this.cur;
          const prev = this.forward.pop();
          this.backward.push(this.cur);
          this.cur = prev;
          if (cur.file !== prev.file) {
            yield this.app.workspace.getMostRecentLeaf().openFile(prev.file);
          }
          const pos = { line: prev.line, ch: prev.ch };
          editor.setSelection(pos);
          editor.scrollIntoView({ from: pos, to: pos }, true);
          logHistory(this.backward, this.cur, this.forward);
        })
      });
      this.registerInterval(window.setInterval(() => {
        var _a;
        if (!this.cur)
          return;
        const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
        if (editor) {
          const cursor = editor.getCursor("head");
          this.saveHistory(this.cur.file, cursor);
        }
      }, 1 * 1e3));
    });
  }
  onunload() {
  }
  saveHistory(file, cursor) {
    if (file === this.cur.file && cursor.line === this.cur.line && cursor.ch === this.cur.ch)
      return;
    if (file === this.cur.file && cursor.line === this.cur.line && cursor.ch !== this.cur.ch) {
      this.cur.ch = cursor.ch;
      return;
    }
    this.backward.push(this.cur);
    this.cur = { file, line: cursor.line, ch: cursor.ch };
    this.backward = this.backward.slice(-50);
    this.forward = [];
    logHistory(this.backward, this.cur, this.forward);
  }
};


/* nosourcemap */